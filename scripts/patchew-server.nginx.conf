worker_processes auto;

user root;
pid /tmp/nginx.pid;
error_log /data/patchew/log/nginx.error.log;
daemon off;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex on; # set to 'on' if nginx worker_processes > 1
  use epoll;
}

http {
  include /etc/nginx/mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  types_hash_max_size 1024;
  access_log /data/patchew/log/nginx.access.log combined;
  sendfile on;

  upstream patchew {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server unix:/data/patchew/gunicorn.sock fail_timeout=0;

    # for a TCP configuration
    # server 192.168.0.7:8000 fail_timeout=0;
  }

  server {
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    listen 80;
    listen unix:/data/patchew/nginx.sock;

    # set the correct host(s) for your site
    server_name _ .patchew.org;

    keepalive_timeout 5;

    location = /favicon.ico {
        alias /opt/patchew/static/favicon.ico;
    }

    location = /robots.txt {
        alias /opt/patchew/static/robots.txt;
    }

    location /static {
        root /opt/patchew/wsgi;
    }

    location /media {
        root /data/patchew;
    }

    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # enable this if and only if you use HTTPS
      # proxy_set_header X-Forwarded-Proto https;
      proxy_set_header Host $host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://patchew;
    }

    proxy_connect_timeout       600;
    proxy_send_timeout          600;
    proxy_read_timeout          600;
    send_timeout                600;
  }
}
